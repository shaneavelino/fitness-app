{"version":3,"sources":["components/ExerciseCard.js","components/Containers/Exercises.js","components/App.js","serviceWorker.js","index.js"],"names":["ExerciseCard","className","this","props","name","comments","href","videoLink","Component","Exercises","state","clicked","handleClick","bind","e","setState","onClick","exercises","map","ex","id","exerciseType","repType","defaultProps","warmup","strength","timed","untimed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAiBeA,G,uLAZX,OACE,yBAAKC,UAAU,iBACb,wBAAIA,UAAU,kBAAkBC,KAAKC,MAAMC,MAC3C,yBAAKH,UAAU,oBAAoBC,KAAKC,MAAME,UAC9C,yBAAKJ,UAAU,kBACb,uBAAGK,KAAMJ,KAAKC,MAAMI,WAApB,sB,GAPiBC,cCCrBC,G,kBACJ,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CAAEC,SAAS,GACxB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,yEAmCPC,GACVZ,KAAKa,SAAS,CAAEJ,SAAS,M,+BAIzB,OACE,yBAAKV,UAAU,aACb,yCACA,4BAAQA,UAAU,aAAae,QAASd,KAAKU,aAA7C,gBAGA,yBAAKX,UAAU,kBACZC,KAAKC,MAAMc,UAAUC,KAAI,SAAAC,GAAE,OAC1B,kBAAC,EAAD,CACEC,GAAID,EAAGC,GACPhB,KAAMe,EAAGf,KACTiB,aAAcF,EAAGE,aACjBC,QAASH,EAAGG,QACZf,UAAWY,EAAGZ,UACdF,SAAUc,EAAGd,oB,GAvDHG,cAAlBC,EAMGc,aAAe,CACpBN,UAAW,CACT,CACEG,GAAI,EACJhB,KAAM,8BACNiB,aAAc,CAAEG,QAAQ,EAAMC,UAAU,GACxCH,QAAS,CAAEI,OAAO,EAAOC,SAAS,GAClCpB,UAAW,0CACXF,SACE,kEAEJ,CACEe,GAAI,EACJhB,KAAM,sBACNiB,aAAc,CAAEG,QAAQ,EAAOC,UAAU,GACzCH,QAAS,CAAEI,OAAO,EAAOC,SAAS,GAClCpB,UAAW,0CACXF,SAAU,gCAEZ,CACEe,GAAI,EACJhB,KAAM,WACNiB,aAAc,CAAEG,QAAQ,EAAMC,UAAU,GACxCH,QAAS,CAAEI,OAAO,EAAMC,SAAS,GACjCpB,UAAW,0CACXF,SAAU,sBAiCHI,QCxDAmB,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCKc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.386bbb55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ExerciseCard.css';\n\nclass ExerciseCard extends Component {\n  render() {\n    return (\n      <div className='Exercise-card'>\n        <h1 className='Exercise-title'>{this.props.name}</h1>\n        <div className='Exercise-comment'>{this.props.comments}</div>\n        <div className='Exercise-video'>\n          <a href={this.props.videoLink}>How To Video</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ExerciseCard;\n","import React, { Component } from 'react';\nimport ExerciseCard from '../ExerciseCard';\nimport './Exercises.css';\n\nclass Exercises extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicked: false };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  static defaultProps = {\n    exercises: [\n      {\n        id: 1,\n        name: \"Yuri's Shoulder Band Warmup\",\n        exerciseType: { warmup: true, strength: false },\n        repType: { timed: false, untimed: true },\n        videoLink: 'https://youtube.com/watch?v=Vwn5hSf3WEg',\n        comments:\n          'Less good: stick dislocates, can also be done with a tee-shirt'\n      },\n      {\n        id: 2,\n        name: 'Pull-up Progression',\n        exerciseType: { warmup: false, strength: true },\n        repType: { timed: false, untimed: true },\n        videoLink: 'https://youtube.com/watch?v=Vwn5hSf3WEg',\n        comments: 'Beginner pull up progression'\n      },\n      {\n        id: 3,\n        name: 'Deadbugs',\n        exerciseType: { warmup: true, strength: false },\n        repType: { timed: true, untimed: false },\n        videoLink: 'https://youtube.com/watch?v=Vwn5hSf3WEg',\n        comments: 'Lay on the floor'\n      }\n    ]\n  };\n\n  handleClick(e) {\n    this.setState({ clicked: true });\n  }\n\n  render() {\n    return (\n      <div className='Exercises'>\n        <h1>Exercises</h1>\n        <button className='add-button' onClick={this.handleClick}>\n          Add Exercise\n        </button>\n        <div className='Exercise-cards'>\n          {this.props.exercises.map(ex => (\n            <ExerciseCard\n              id={ex.id}\n              name={ex.name}\n              exerciseType={ex.exerciseType}\n              repType={ex.repType}\n              videoLink={ex.videoLink}\n              comments={ex.comments}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Exercises;\n","import React from 'react';\nimport './App.css';\nimport Excercises from './Containers/Exercises';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Excercises />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}